# import streamlit as st
# import os
# import random as r
# import sys
# import platform
# import multiprocessing
# import threading
# import time

# st.write("OS Type: ", os.name)

# st.write("OS Name: ", sys.platform)

# st.write("OS Platform: ", platform.platform())

# numberOfCores = multiprocessing.cpu_count()
# st.write("Num of cores are: ", numberOfCores)

# activeThread = threading.activeCount()
# st.write("Num of threads: ", activeThread)

# st.write("Present working directory: ", os.getcwd())

# def task (lb, ub, refreshTime, displayLocation):
#     while(1):
#         num = r.randint(lb, ub)
#         # display(num, displayLocation)
#         st.write(f'.thread {displayLocation} got {num}')
#         time.sleep(refreshTime)
#     return

# t1 = threading.Thread(target=task, args=(10,20,10,10))
# t2 = threading.Thread(target=task, args=(-10,10,20,20))
# t3 = threading.Thread(target=task, args=(-100,0,8,30))
# t4 = threading.Thread(target=task, args=(0,20,12,40))
# t5 = threading.Thread(target=task, args=(-40,40,16,50))
# t6 = threading.Thread(target=task, args=(100,200,14,60))

# st.scriptrunner.add_script_run_ctx(t1)
# st.scriptrunner.add_script_run_ctx(t2)
# st.scriptrunner.add_script_run_ctx(t3)
# st.scriptrunner.add_script_run_ctx(t4)
# st.scriptrunner.add_script_run_ctx(t5)
# st.scriptrunner.add_script_run_ctx(t6)

# t1.start()
# t2.start()
# t3.start()
# t4.start()
# t5.start()
# t6.start()

import streamlit as st
import random
import threading
import time

# Define a function to generate random numbers
def generate_random_numbers(state):
    while True:
        state.random_number = random.randint(0, 100)
        time.sleep(1)

# Create the Streamlit app
def main():
    st.title("Random Number Generator Dashboard")

    # Create a new SessionState object
    state = st.session_state

    # Check if the SessionState object already has a "random_number" attribute
    if "random_number" not in state:
        state.random_number = 0

    # Add a button to start generating random numbers
    if st.button("Start Generating Random Numbers"):
        # Check if the SessionState object already has a "stop_thread" attribute
        if "stop_thread" not in state:
            # Create a new thread to generate random numbers
            state.stop_thread = False
            t = threading.Thread(target=generate_random_numbers, args=(state,))
            t.start()

    # Add a button to stop generating random numbers
    if st.button("Stop Generating Random Numbers"):
        # Set the "stop_thread" attribute to True to stop the thread
        state.stop_thread = True

    # Display the random number generated by the thread
    st.write("Random Number:", state.random_number)

if __name__ == "__main__":
    main()
